import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useEffect, useState } from "react";
import {
  deleteObject,
  getDownloadURL,
  listAll,
  ref,
  uploadBytes,
} from "firebase/storage";
import { GiHollowCat, GiTrashCan } from "react-icons/gi";
import { AiFillDelete } from "react-icons/ai";

import { Footer } from "src/components/Layout/Footer";
import { Header } from "src/components/Layout/Header";
import { auth, db, storage } from "src/firebase/firebaseConfig";
import {
  addDoc,
  collection,
  deleteDoc,
  doc,
  onSnapshot,
  query,
  serverTimestamp,
} from "firebase/firestore";
import { onAuthStateChanged } from "firebase/auth";

const Home: NextPage = () => {
  const [petName, setPetName] = useState("");
  const [petImage, setPetImage] = useState<File | null>(null);
  const [petImagePreview, setPetImagePreview] = useState<string | undefined>(
    undefined
  );
  const [petImageName, setPetImageName] = useState("");
  const [petProfile, setPetProfile] = useState([
    {
      id: "",
      petName: "",
      petImage: "",
      petImageName: "",
    },
  ]);

  useEffect(() => {
    const q = query(collection(db, "petProfile"));
    
    onSnapshot(q, (snapshot) => {
      setPetProfile(
        snapshot.docs.map((doc) => ({
          id: doc.id,
          petName: doc.data().petName,
          petImage: doc.data().petImage,
          petImageName: doc.data().petImageName,
        }))
      );
    });
  }, []);

  const onChangeImageHandler = async (e: any) => {
    console.log(e.target.files[0]);
    setPetImage(e.target.files[0]);
    setPetImagePreview(window.URL.createObjectURL(e.target.files[0]));
  };

  const addImage = async (petImage: any) => {
    let url = "";
      const S =
        "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
      const N = 16;
      const randomChar = Array.from(crypto.getRandomValues(new Uint32Array(N)))
        .map((n) => S[n % S.length])
        .join("");
      const fileName = randomChar + "_" + petImage.name;
      console.log(fileName);
      console.log("jpg: " + petImageName);
      await uploadBytes(ref(storage, `petProfileImages/${fileName}`), petImage);
      url = await getDownloadURL(ref(storage, `petProfileImages/${fileName}`));
    console.log(url);

    auth.onAuthStateChanged((user) => {
      if (user) {
        addDoc(collection(db, "petProfile"), {
          petName: petName,
          petImage: url,
          petImageName: petImageName,
          timestamp: serverTimestamp(),
        });
      }
    });
    

    setPetName("");
    setPetImage(null);
    setPetImagePreview(undefined);
    setPetImageName("");
  };

  // const deleteImage = async (e) => {
  //   await deleteDoc(collection(db, "petProfileImages"), e.target.id);
  //   await ref(storage, `petProfileImages/${e.target.id}`).delete();
  // }

  const deleteImage = (e: any) => {
    console.log(e.target);
    const desertRef = ref(storage, `petProfileImages/${e}`);
    deleteObject(desertRef)
      .then(() => {
        // File deleted successfully
        alert("File deleted successfully");
      })
      .catch((error) => {
        // Uh-oh, an error occurred!
        alert("Error deleting file");
      });
  };

  return (
    <>
      <Header title="satoWa">
        <Head>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
      </Header>

      <main>
        <div className="flex justify-items-center lg:mx-auto">
          <div className="lg:mx-auto">
            <Image
              src="/images/dog.jpg"
              alt="Picture of the author"
              width={1440}
              height={500}
              objectFit="contain"
            />
          </div>
        </div>

        <div className="flex justify-center">
          <div className="my-6 w-96 rounded-xl bg-white">
            <label htmlFor="name">ペットの名前</label>
            <br />
            <input
              id="name"
              type="text"
              placeholder="ペットの名前を入力してください"
              required
              value={petName}
              onChange={(e) => setPetName(e.target.value)}
              className="h-10 w-full rounded-md border-2 border-primary-orange px-2 hover:border-primary-thinOrange focus:outline-primary-brown"
            />
            <label htmlFor="image">
              <div className="h-32 w-32 cursor-pointer rounded-full border-2">
                {petImagePreview ? (
                  <img
                    src={petImagePreview!}
                    className="h-32 w-full rounded-full object-cover"
                  />
                ) : (
                  <GiHollowCat size={64} className="m-auto h-32 text-center" />
                )}
              </div>
              <input
                id="image"
                type="file"
                accept=".jpg, .jpeg, .png"
                onChange={onChangeImageHandler}
                className="hidden"
                required
              />
            </label>
            <button
              onClick={addImage}
              disabled={!petName || !petImage}
              className="mt-4 mb-8 h-12 w-full rounded-3xl bg-primary-thinOrange text-2xl shadow-lg hover:bg-primary-orange hover:text-white disabled:bg-slate-300"
            >
              作成
            </button>
          </div>
        </div>

        <div className="m-auto">
          <div>
            <div className="mb-3 flex justify-center pt-3 text-3xl underline">
              New Family
            </div>
          </div>
          <div className="text-center">
            <div className="grid grid-cols-2 justify-items-center gap-y-5 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 2xl:grid-cols-7">
              {petProfile.map((post) => (
                <div
                  key={post.id}
                  className="w-40 rounded-lg bg-green-800 p-4 text-center shadow-xl"
                >
                  <div className="flex justify-center ">
                    <img
                      src={post.petImage}
                      alt="ペットの画像"
                      className="h-32 w-full rounded-full object-cover"
                    />
                  </div>
                  <div className="py-2 text-white">{post.petName}</div>
                  <button className="text-orange-600">Tap</button>
                  <br />
                  <button
                    onClick={() => {
                      const desertRef = ref(storage, "petProfileImages/" + post.petImageName);
                      // Delete the file
                      deleteObject(desertRef)
                        .then(() => {
                          // File deleted successfully
                          alert("File deleted successfully");
                        })
                        .catch((error) => {
                          // Uh-oh, an error occurred!
                          alert("Error deleting file");
                        });
                        deleteDoc(doc(db, "petProfile", post.id))
                      console.log(post.petImageName);
                    }}
                    className="text-lg text-slate-200"
                  >
                    <GiTrashCan />
                  </button>
                </div>
              ))}
            </div>
            <div className="m-4">
              <Link href="/album">
                <a className="text-3xl text-orange-500">もっと見る</a>
              </Link>
            </div>
          </div>
        </div>

        <div className="m-auto">
          <div>
            <div className="mb-3 flex justify-center pt-3 text-3xl underline">
              New Album
            </div>
          </div>
          <div className="text-center">
            <div className="m-4">
              <Link href="/album">
                <a className="text-3xl text-orange-500">もっと見る</a>
              </Link>
            </div>
          </div>
        </div>
      </main>
      <Footer />
    </>
  );
};

export default Home;
